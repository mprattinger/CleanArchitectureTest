@using CleanArchitectureTest.Contracts.Entities

@inject ITodoService todoService

@if (Todo is not null)
{
    <div class="border-2 border-gray-400 p-4 rounded-lg bg-white shadow-lg">
        <div class="flex border-b-2 mb-2">
            <div class="grow">
                <div class="text-lg font-bold">@Todo.Title</div>
                <p class="p-2 mb-1">@Todo.Description</p>
            </div>
            <div>
                <button>
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                        <path stroke-linecap="round" stroke-linejoin="round" d="m4.5 12.75 6 6 9-13.5" />
                    </svg>
                </button>
            </div>
        </div>
        <div>
            <div class="flex">
                <div class="grow">
                    @if (Todo.DueDate is not null)
                    {
                        <Output Label="Enddatum" Text="@Todo.DueDate.Value.ToShortDateString()" />

                        <Output Label="Erstellt von" Text="@($"{Todo.CreatedBy?.FirstName} {Todo.CreatedBy?.LastName}")" />
                    }
                </div>
                <div class="grow">
                    @if (_appointees.Any())
                    {
                        <span class="font-bold">Wer?</span>
                        <ul>
                            @foreach (var a in _appointees)
                            {
                                <li>@a.FirstName @a.LastName</li>
                            }
                        </ul>
                    }
                </div>
            </div>
        </div>
    </div>
    @*  <div class="">
        <div class="">
            <h2>@Todo.Title</h2>
            <p>@Todo.Description</p>
            <div class="container">
                <div class="row">
                    <div class="col">
                        @if (Todo.DueDate is not null)
                        {
                            <div class="twl">
                                <span>Enddatum</span>
                                @Todo.DueDate.Value.ToShortDateString()
                            </div>

                            <div class="twl">
                                <span>Erstellt von</span>
                                @Todo.CreatedBy?.FirstName @Todo.CreatedBy?.LastName
                            </div>
                        }
                    </div>
                    <div class="col">
                        @if (_appointees.Any())
                        {
                            <ul>
                                @foreach(var a in _appointees)
                                {
                                    <li>@a.FirstName @a.LastName</li>
                                }
                            </ul>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div> *@
}

@code {

    List<MemberEntity> _appointees = [];

    [Parameter]
    public TodoEntity? Todo { get; set; }

    [CascadingParameter(Name = "ErrorComponent")]
    protected IErrorComponent? ErrorComponent { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Todo is not null)
        {
            try
            {
                _appointees = await todoService.GetAppointeesForTodo(Todo.Id);
            }
            catch (Exception ex)
            {
                if (ErrorComponent is not null)
                {
                    ErrorComponent.ShowError("Loading Appointees", ex.Message);
                }
            }
        }
    }
}
